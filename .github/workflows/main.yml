name: Basic CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Export env variables
        run: |
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install

      - name: Run linting
        run: |
          flake8 app tests

      - name: Run tests
        run: |
          pytest tests/ -v

  frontend-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Export env variables
        run: |
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run linting
        run: npm run lint

  trivy-backend-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build Docker image (backend)
        run: docker build -t backend-image:latest .
      - name: Scan Docker image with Trivy (backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'backend-image:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  trivy-frontend-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build Docker image (frontend)
        run: docker build -t frontend-image:latest .
      - name: Scan Docker image with Trivy (frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'frontend-image:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  anchore-backend-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build Docker image (backend)
        run: docker build -t backend-image:latest .
      - name: Scan Docker image with Anchore (backend)
        uses: anchore/scan-action@v3
        with:
          image: backend-image:latest
          fail-build: true
          severity-cutoff: high

  anchore-frontend-image:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build Docker image (frontend)
        run: docker build -t frontend-image:latest .
      - name: Scan Docker image with Anchore (frontend)
        uses: anchore/scan-action@v3
        with:
          image: frontend-image:latest
          fail-build: true
          severity-cutoff: high